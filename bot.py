from asyncio import run
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from dotenv import load_dotenv
from os import environ

from src.db import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_db()
load_dotenv()
API_TOKEN = environ.get("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def confirm_keyboard(match_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{match_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{match_id}")
        ]
    ])


# üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username
def update_username(telegram_id, username):
    if username:
        with connect() as conn:
            cur = conn.cursor()
            cur.execute("UPDATE players SET username = ? WHERE telegram_id = ?", (username, telegram_id))
            conn.commit()


# üì© /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫–ª—É–±–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞ üèì\n"
                        "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /reg")


# üÜï /reg ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message(Command("reg"))
async def cmd_reg(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    if not username:
        await message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –û–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–∏—è.")
        return

    existing = get_player_by_telegram_id(user_id)
    if existing:
        await message.answer(f"‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ @{username}.")
        update_username(user_id, username)
        return

    register_player(user_id, username)
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}! –¢—ã —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ üèÜ")


# üë§ /whoami ‚Äî –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–∞
@dp.message(Command("whoami"))
async def cmd_whoami(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    update_username(user_id, username)

    player = get_player_by_telegram_id(user_id)
    if not player:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /reg")
        return

    player_id = player[0]
    rating = player[3]
    games = get_games_played(player_id)

    await message.answer(
        f"üë§ @{username}\n"
        f"üèì –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
        f"üéÆ –ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: {games}"
    )


# üéÆ /match @user 3:1 ‚Äî —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—á
@dp.message(Command("match"))
async def cmd_match(message: Message):
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /match @opponent 3:1")
        return

    author = message.from_user
    author_id = author.id
    username = author.username
    update_username(author_id, username)

    opponent_tag = args[1].lstrip("@")
    score = args[2]

    try:
        s1, s2 = map(int, score.split(":"))
    except:
        await message.answer("–°—á—ë—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 3:1")
        return

    player1 = get_player_by_telegram_id(author_id)
    player2 = get_player_by_username(opponent_tag)

    if not player2:
        await message.answer(f"–ò–≥—Ä–æ–∫ @{opponent_tag} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if player1[0] == player2[0]:
        await message.answer("–ù–µ–ª—å–∑—è —Å—ã–≥—Ä–∞—Ç—å –º–∞—Ç—á —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
        return

    winner_id = player1[0] if s1 > s2 else player2[0]
    match_id = record_match(player1[0], player2[0], s1, s2, winner_id)

    await message.answer(f"–ú–∞—Ç—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ @{opponent_tag}.")

    await bot.send_message(
        chat_id=player2[1],
        text=(
            f"üèì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Ç—á–∞ –æ—Ç @{username}:\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: @{username} {s1}:{s2} –í—ã\n"
            f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        ),
        reply_markup=confirm_keyboard(match_id)
    )


@dp.callback_query(F.data.startswith("confirm:"))
async def on_confirm_match(callback: CallbackQuery):
    match_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("SELECT player1_id, player2_id FROM matches WHERE id = ?", (match_id,))
        match = cur.fetchone()

    if not match:
        await callback.message.edit_text("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer("–û—à–∏–±–∫–∞.")
        return

    player1_id, player2_id = match
    confirmer_id = callback.from_user.id

    success = confirm_match(match_id)

    if success:
        await callback.message.edit_text("‚úÖ –ú–∞—Ç—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await callback.answer("–ú–∞—Ç—á –∑–∞–ø–∏—Å–∞–Ω.")

        # –£–≤–µ–¥–æ–º–∏–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–Ω–µ —Ç–æ—Ç, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª)
        author_id = player1_id if get_player_by_id(player2_id)[1] == confirmer_id else player2_id
        author = get_player_by_id(author_id)

        if author:
            await bot.send_message(
                chat_id=author[1],
                text=f"‚úÖ –ú–∞—Ç—á —Å @{callback.from_user.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –∑–∞—Å—á–∏—Ç–∞–Ω!"
            )
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Ç—á (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω).")
        await callback.answer("–û—à–∏–±–∫–∞.")


# ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–∞—Ç—á–∞
@dp.callback_query(F.data.startswith("reject:"))
async def on_reject_match(callback: CallbackQuery):
    match_id = int(callback.data.split(":")[1])

    with connect() as conn:
        cur = conn.cursor()
        cur.execute("SELECT player1_id, player2_id FROM matches WHERE id = ?", (match_id,))
        match = cur.fetchone()

    if not match:
        await callback.message.edit_text("‚ö†Ô∏è –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.")
        await callback.answer("–û—à–∏–±–∫–∞.")
        return

    player1_id, player2_id = match
    rejector_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –º–∞—Ç—á
    with connect() as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM matches WHERE id = ?", (match_id,))
        conn.commit()

    await callback.message.edit_text("‚ùå –ú–∞—Ç—á –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    await callback.answer("–ú–∞—Ç—á —É–¥–∞–ª—ë–Ω.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
    player1 = get_player_by_id(player1_id)
    if player1:
        await bot.send_message(
            chat_id=player1[1],
            text=f"‚ö†Ô∏è –ú–∞—Ç—á —Å @{callback.from_user.username} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω."
        )


# üìä /rating ‚Äî —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
@dp.message(Command("rating"))
async def cmd_rating(message: Message):
    rating = get_rating_table()
    text = "<b>üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
    for i, (username, score) in enumerate(rating, start=1):
        text += f"{i}. @{username} ‚Äî {score}\n"
    await message.answer(text, parse_mode=ParseMode.HTML)


# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    run(main())
